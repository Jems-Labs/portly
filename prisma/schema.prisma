generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String               @unique
  email               String               @unique
  password            String
  image               ProfileImage?
  bio                 String?              @db.Text
  firstName           String?
  lastName            String?
  status              Status?              @default(open)
  pronouns            personalPronouns?    @default(prefer_not_to_say)
  skills              Skill[]
  socialLinks         SocialLink[]
  projects            Project[]
  education           Education[]
  workExperience      WorkExperience[]
  volunteerExperience VolunteerExperience[]
  certifications      Certification[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ProfileImage {
  id     Int    @id @default(autoincrement())
  url    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Skill {
  id     Int    @id @default(autoincrement())
  name   String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model SocialLink {
  id       Int      @id @default(autoincrement())
  url      String
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  platform Platform
}

model Project {
  id         Int      @id @default(autoincrement())
  name       String
  tagline    String
  projectUrl String?
  logo       String
  tools      String[]
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  videoUrl   String?
  createdAt  DateTime @default(now())
}

model Education {
  id           Int    @id @default(autoincrement())
  school       String
  degree       String
  fieldOfStudy String
  startDate    Int
  endDate      Int
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
}

model WorkExperience {
  id                 Int     @id @default(autoincrement())
  company            String
  companyWebsite     String?
  title              String
  description        String?
  fromMonth          String
  fromYear           Int
  isCurrentlyWorking Boolean @default(false)
  toMonth            String?
  toYear             Int?

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model VolunteerExperience {
  id                 Int     @id @default(autoincrement())
  role               String
  organization       String
  fromMonth          String
  fromYear           Int
  isCurrentlyWorking Boolean @default(false)
  toMonth            String?
  toYear             Int?
  userId             Int
  user               User    @relation(fields: [userId], references: [id])
  description        String?
}

model Certification {
  id              Int     @id @default(autoincrement())
  name            String
  issuedBy        String
  issueMonth      String
  issueYear       Int
  expirationMonth String?
  expirationYear  Int?
  userId          Int
  user            User    @relation(fields: [userId], references: [id])
}

enum Status {
  open
  hiring
}

enum personalPronouns {
  he_him
  she_her
  they_their
  prefer_not_to_say
}

enum Platform {
  GITHUB
  DRIBBBLE
  MEDIUM
  X
  LINKEDIN
  YOUTUBE
  FIGMA
  INSTAGRAM
  FACEBOOK
  THREADS
  GUMROAD
}
